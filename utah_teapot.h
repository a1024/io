#ifndef UTAH_TEAPOT
#define UTAH_TEAPOT

typedef struct IdxRangeStruct
{
	int start, n_elem;
} IdxRange;
typedef struct ModelStruct
{
	float *VVVNNNTT;
	int *indices;
	IdxRange *faces;
	int n_floats, n_elements, n_faces;
} Model;
void	generate_utah_mesh(ModelStruct *model, int resolution);
void	destroy_model(ModelStruct *model);


#ifdef UTAH_TEAPOT_IMPLEMENTATION
//https://github.com/dasch/graphics/blob/master/data/teapot.data
//bi-cubic Bezier surfaces
const float utah_bezier_vertices[]=
{
	 1.40000f,   0.00000f,   2.40000f,//  0
	 1.40000f,  -0.78400f,   2.40000f,//  1
	 0.78000f,  -1.40000f,   2.40000f,//  2
	 0.00000f,  -1.40000f,   2.40000f,//  3
	 1.33750f,   0.00000f,   2.53125f,//  4
	 1.33750f,  -0.74900f,   2.53125f,//  5
	 0.74900f,  -1.33750f,   2.53125f,//  6
	 0.00000f,  -1.33750f,   2.53125f,//  7
	 1.43750f,   0.00000f,   2.53125f,//  8
	 1.43750f,  -0.80500f,   2.53125f,//  9
	 0.80500f,  -1.43750f,   2.53125f,// 10
	 0.00000f,  -1.43750f,   2.53125f,// 11
	 1.50000f,   0.00000f,   2.40000f,// 12
	 1.50000f,  -0.84000f,   2.40000f,// 13
	 0.84000f,  -1.50000f,   2.40000f,// 14
	 0.00000f,  -1.50000f,   2.40000f,// 15
	-0.78400f,  -1.40000f,   2.40000f,// 16
	-1.40000f,  -0.78400f,   2.40000f,// 17
	-1.40000f,   0.00000f,   2.40000f,// 18
	-0.74900f,  -1.33750f,   2.53125f,// 19
	-1.33750f,  -0.74900f,   2.53125f,// 20
	-1.33750f,   0.00000f,   2.53125f,// 21
	-0.80500f,  -1.43750f,   2.53125f,// 22
	-1.43750f,  -0.80500f,   2.53125f,// 23
	-1.43750f,   0.00000f,   2.53125f,// 24
	-0.84000f,  -1.50000f,   2.40000f,// 25
	-1.50000f,  -0.84000f,   2.40000f,// 26
	-1.50000f,   0.00000f,   2.40000f,// 27
	-1.40000f,   0.78400f,   2.40000f,// 28
	-0.78400f,   1.40000f,   2.40000f,// 29
	 0.00000f,   1.40000f,   2.40000f,// 30
	-1.33750f,   0.74900f,   2.53125f,// 31
	-0.74900f,   1.33750f,   2.53125f,// 32
	 0.00000f,   1.33750f,   2.53125f,// 33
	-1.43750f,   0.80500f,   2.53125f,// 34
	-0.80500f,   1.43750f,   2.53125f,// 35
	 0.00000f,   1.43750f,   2.53125f,// 36
	-1.50000f,   0.84000f,   2.40000f,// 37
	-0.84000f,   1.50000f,   2.40000f,// 38
	 0.00000f,   1.50000f,   2.40000f,// 39
	 0.78400f,   1.40000f,   2.40000f,// 40
	 1.40000f,   0.78400f,   2.40000f,// 41
	 0.74900f,   1.33750f,   2.53125f,// 42
	 1.33750f,   0.74900f,   2.53125f,// 43
	 0.80500f,   1.43750f,   2.53125f,// 44
	 1.43750f,   0.80500f,   2.53125f,// 45
	 0.84000f,   1.50000f,   2.40000f,// 46
	 1.50000f,   0.84000f,   2.40000f,// 47
	 1.75000f,   0.00000f,   1.87500f,// 48
	 1.75000f,  -0.98000f,   1.87500f,// 49
	 0.98000f,  -1.75000f,   1.87500f,// 50
	 0.00000f,  -1.75000f,   1.87500f,// 51
	 2.00000f,   0.00000f,   1.35000f,// 52
	 2.00000f,  -1.12000f,   1.35000f,// 53
	 1.12000f,  -2.00000f,   1.35000f,// 54
	 0.00000f,  -2.00000f,   1.35000f,// 55
	 2.00000f,   0.00000f,   0.90000f,// 56
	 2.00000f,  -1.12000f,   0.90000f,// 57
	 1.12000f,  -2.00000f,   0.90000f,// 58
	 0.00000f,  -2.00000f,   0.90000f,// 59
	-0.98000f,  -1.75000f,   1.87500f,// 60
	-1.75000f,  -0.98000f,   1.87500f,// 61
	-1.75000f,   0.00000f,   1.87500f,// 62
	-1.12000f,  -2.00000f,   1.35000f,// 63
	-2.00000f,  -1.12000f,   1.35000f,// 64
	-2.00000f,   0.00000f,   1.35000f,// 65
	-1.12000f,  -2.00000f,   0.90000f,// 66
	-2.00000f,  -1.12000f,   0.90000f,// 67
	-2.00000f,   0.00000f,   0.90000f,// 68
	-1.75000f,   0.98000f,   1.87500f,// 69
	-0.98000f,   1.75000f,   1.87500f,// 70
	 0.00000f,   1.75000f,   1.87500f,// 71
	-2.00000f,   1.12000f,   1.35000f,// 72
	-1.12000f,   2.00000f,   1.35000f,// 73
	 0.00000f,   2.00000f,   1.35000f,// 74
	-2.00000f,   1.12000f,   0.90000f,// 75
	-1.12000f,   2.00000f,   0.90000f,// 76
	 0.00000f,   2.00000f,   0.90000f,// 77
	 0.98000f,   1.75000f,   1.87500f,// 78
	 1.75000f,   0.98000f,   1.87500f,// 79
	 1.12000f,   2.00000f,   1.35000f,// 80
	 2.00000f,   1.12000f,   1.35000f,// 81
	 1.12000f,   2.00000f,   0.90000f,// 82
	 2.00000f,   1.12000f,   0.90000f,// 83
	 2.00000f,   0.00000f,   0.45000f,// 84
	 2.00000f,  -1.12000f,   0.45000f,// 85
	 1.12000f,  -2.00000f,   0.45000f,// 86
	 0.00000f,  -2.00000f,   0.45000f,// 87
	 1.50000f,   0.00000f,   0.22500f,// 88
	 1.50000f,  -0.84000f,   0.22500f,// 89
	 0.84000f,  -1.50000f,   0.22500f,// 90
	 0.00000f,  -1.50000f,   0.22500f,// 91
	 1.50000f,   0.00000f,   0.15000f,// 92
	 1.50000f,  -0.84000f,   0.15000f,// 93
	 0.84000f,  -1.50000f,   0.15000f,// 94
	 0.00000f,  -1.50000f,   0.15000f,// 95
	-1.12000f,  -2.00000f,   0.45000f,// 96
	-2.00000f,  -1.12000f,   0.45000f,// 97
	-2.00000f,   0.00000f,   0.45000f,// 98
	-0.84000f,  -1.50000f,   0.22500f,// 99
	-1.50000f,  -0.84000f,   0.22500f,//100
	-1.50000f,   0.00000f,   0.22500f,//101
	-0.84000f,  -1.50000f,   0.15000f,//102
	-1.50000f,  -0.84000f,   0.15000f,//103
	-1.50000f,   0.00000f,   0.15000f,//104
	-2.00000f,   1.12000f,   0.45000f,//105
	-1.12000f,   2.00000f,   0.45000f,//106
	 0.00000f,   2.00000f,   0.45000f,//107
	-1.50000f,   0.84000f,   0.22500f,//108
	-0.84000f,   1.50000f,   0.22500f,//109
	 0.00000f,   1.50000f,   0.22500f,//110
	-1.50000f,   0.84000f,   0.15000f,//111
	-0.84000f,   1.50000f,   0.15000f,//112
	 0.00000f,   1.50000f,   0.15000f,//113
	 1.12000f,   2.00000f,   0.45000f,//114
	 2.00000f,   1.12000f,   0.45000f,//115
	 0.84000f,   1.50000f,   0.22500f,//116
	 1.50000f,   0.84000f,   0.22500f,//117
	 0.84000f,   1.50000f,   0.15000f,//118
	 1.50000f,   0.84000f,   0.15000f,//119
	-1.60000f,   0.00000f,   2.02500f,//120
	-1.60000f,  -0.30000f,   2.02500f,//121
	-1.50000f,  -0.30000f,   2.25000f,//122
	-1.50000f,   0.00000f,   2.25000f,//123
	-2.30000f,   0.00000f,   2.02500f,//124
	-2.30000f,  -0.30000f,   2.02500f,//125
	-2.50000f,  -0.30000f,   2.25000f,//126
	-2.50000f,   0.00000f,   2.25000f,//127
	-2.70000f,   0.00000f,   2.02500f,//128
	-2.70000f,  -0.30000f,   2.02500f,//129
	-3.00000f,  -0.30000f,   2.25000f,//130
	-3.00000f,   0.00000f,   2.25000f,//131
	-2.70000f,   0.00000f,   1.80000f,//132
	-2.70000f,  -0.30000f,   1.80000f,//133
	-3.00000f,  -0.30000f,   1.80000f,//134
	-3.00000f,   0.00000f,   1.80000f,//135
	-1.50000f,   0.30000f,   2.25000f,//136
	-1.60000f,   0.30000f,   2.02500f,//137
	-2.50000f,   0.30000f,   2.25000f,//138
	-2.30000f,   0.30000f,   2.02500f,//139
	-3.00000f,   0.30000f,   2.25000f,//140
	-2.70000f,   0.30000f,   2.02500f,//141
	-3.00000f,   0.30000f,   1.80000f,//142
	-2.70000f,   0.30000f,   1.80000f,//143
	-2.70000f,   0.00000f,   1.57500f,//144
	-2.70000f,  -0.30000f,   1.57500f,//145
	-3.00000f,  -0.30000f,   1.35000f,//146
	-3.00000f,   0.00000f,   1.35000f,//147
	-2.50000f,   0.00000f,   1.12500f,//148
	-2.50000f,  -0.30000f,   1.12500f,//149
	-2.65000f,  -0.30000f,   0.93750f,//150
	-2.65000f,   0.00000f,   0.93750f,//151
	-2.00000f,  -0.30000f,   0.90000f,//152
	-1.90000f,  -0.30000f,   0.60000f,//153
	-1.90000f,   0.00000f,   0.60000f,//154
	-3.00000f,   0.30000f,   1.35000f,//155
	-2.70000f,   0.30000f,   1.57500f,//156
	-2.65000f,   0.30000f,   0.93750f,//157
	-2.50000f,   0.30000f,   1.12500f,//158
	-1.90000f,   0.30000f,   0.60000f,//159
	-2.00000f,   0.30000f,   0.90000f,//160
	 1.70000f,   0.00000f,   1.42500f,//161
	 1.70000f,  -0.66000f,   1.42500f,//162
	 1.70000f,  -0.66000f,   0.60000f,//163
	 1.70000f,   0.00000f,   0.60000f,//164
	 2.60000f,   0.00000f,   1.42500f,//165
	 2.60000f,  -0.66000f,   1.42500f,//166
	 3.10000f,  -0.66000f,   0.82500f,//167
	 3.10000f,   0.00000f,   0.82500f,//168
	 2.30000f,   0.00000f,   2.10000f,//169
	 2.30000f,  -0.25000f,   2.10000f,//170
	 2.40000f,  -0.25000f,   2.02500f,//171
	 2.40000f,   0.00000f,   2.02500f,//172
	 2.70000f,   0.00000f,   2.40000f,//173
	 2.70000f,  -0.25000f,   2.40000f,//174
	 3.30000f,  -0.25000f,   2.40000f,//175
	 3.30000f,   0.00000f,   2.40000f,//176
	 1.70000f,   0.66000f,   0.60000f,//177
	 1.70000f,   0.66000f,   1.42500f,//178
	 3.10000f,   0.66000f,   0.82500f,//179
	 2.60000f,   0.66000f,   1.42500f,//180
	 2.40000f,   0.25000f,   2.02500f,//181
	 2.30000f,   0.25000f,   2.10000f,//182
	 3.30000f,   0.25000f,   2.40000f,//183
	 2.70000f,   0.25000f,   2.40000f,//184
	 2.80000f,   0.00000f,   2.47500f,//185
	 2.80000f,  -0.25000f,   2.47500f,//186
	 3.52500f,  -0.25000f,   2.49375f,//187
	 3.52500f,   0.00000f,   2.49375f,//188
	 2.90000f,   0.00000f,   2.47500f,//189
	 2.90000f,  -0.15000f,   2.47500f,//190
	 3.45000f,  -0.15000f,   2.51250f,//191
	 3.45000f,   0.00000f,   2.51250f,//192
	 2.80000f,   0.00000f,   2.40000f,//193
	 2.80000f,  -0.15000f,   2.40000f,//194
	 3.20000f,  -0.15000f,   2.40000f,//195
	 3.20000f,   0.00000f,   2.40000f,//196
	 3.52500f,   0.25000f,   2.49375f,//197
	 2.80000f,   0.25000f,   2.47500f,//198
	 3.45000f,   0.15000f,   2.51250f,//199
	 2.90000f,   0.15000f,   2.47500f,//200
	 3.20000f,   0.15000f,   2.40000f,//201
	 2.80000f,   0.15000f,   2.40000f,//202
	 0.00000f,   0.00000f,   3.15000f,//203
	 0.00000f,  -0.00200f,   3.15000f,//204
	 0.00200f,   0.00000f,   3.15000f,//205
	 0.80000f,   0.00000f,   3.15000f,//206
	 0.80000f,  -0.45000f,   3.15000f,//207
	 0.45000f,  -0.80000f,   3.15000f,//208
	 0.00000f,  -0.80000f,   3.15000f,//209
	 0.00000f,   0.00000f,   2.85000f,//210
	 0.20000f,   0.00000f,   2.70000f,//211
	 0.20000f,  -0.11200f,   2.70000f,//212
	 0.11200f,  -0.20000f,   2.70000f,//213
	 0.00000f,  -0.20000f,   2.70000f,//214
	-0.00200f,   0.00000f,   3.15000f,//215
	-0.45000f,  -0.80000f,   3.15000f,//216
	-0.80000f,  -0.45000f,   3.15000f,//217
	-0.80000f,   0.00000f,   3.15000f,//218
	-0.11200f,  -0.20000f,   2.70000f,//219
	-0.20000f,  -0.11200f,   2.70000f,//220
	-0.20000f,   0.00000f,   2.70000f,//221
	 0.00000f,   0.00200f,   3.15000f,//222
	-0.80000f,   0.45000f,   3.15000f,//223
	-0.45000f,   0.80000f,   3.15000f,//224
	 0.00000f,   0.80000f,   3.15000f,//225
	-0.20000f,   0.11200f,   2.70000f,//226
	-0.11200f,   0.20000f,   2.70000f,//227
	 0.00000f,   0.20000f,   2.70000f,//228
	 0.45000f,   0.80000f,   3.15000f,//229
	 0.80000f,   0.45000f,   3.15000f,//230
	 0.11200f,   0.20000f,   2.70000f,//231
	 0.20000f,   0.11200f,   2.70000f,//232
	 0.40000f,   0.00000f,   2.55000f,//233
	 0.40000f,  -0.22400f,   2.55000f,//234
	 0.22400f,  -0.40000f,   2.55000f,//235
	 0.00000f,  -0.40000f,   2.55000f,//236
	 1.30000f,   0.00000f,   2.55000f,//237
	 1.30000f,  -0.72800f,   2.55000f,//238
	 0.72800f,  -1.30000f,   2.55000f,//239
	 0.00000f,  -1.30000f,   2.55000f,//240
	 1.30000f,   0.00000f,   2.40000f,//241
	 1.30000f,  -0.72800f,   2.40000f,//242
	 0.72800f,  -1.30000f,   2.40000f,//243
	 0.00000f,  -1.30000f,   2.40000f,//244
	-0.22400f,  -0.40000f,   2.55000f,//245
	-0.40000f,  -0.22400f,   2.55000f,//246
	-0.40000f,   0.00000f,   2.55000f,//247
	-0.72800f,  -1.30000f,   2.55000f,//248
	-1.30000f,  -0.72800f,   2.55000f,//249
	-1.30000f,   0.00000f,   2.55000f,//250
	-0.72800f,  -1.30000f,   2.40000f,//251
	-1.30000f,  -0.72800f,   2.40000f,//252
	-1.30000f,   0.00000f,   2.40000f,//253
	-0.40000f,   0.22400f,   2.55000f,//254
	-0.22400f,   0.40000f,   2.55000f,//255
	 0.00000f,   0.40000f,   2.55000f,//256
	-1.30000f,   0.72800f,   2.55000f,//257
	-0.72800f,   1.30000f,   2.55000f,//258
	 0.00000f,   1.30000f,   2.55000f,//259
	-1.30000f,   0.72800f,   2.40000f,//260
	-0.72800f,   1.30000f,   2.40000f,//261
	 0.00000f,   1.30000f,   2.40000f,//262
	 0.22400f,   0.40000f,   2.55000f,//263
	 0.40000f,   0.22400f,   2.55000f,//264
	 0.72800f,   1.30000f,   2.55000f,//265
	 1.30000f,   0.72800f,   2.55000f,//266
	 0.72800f,   1.30000f,   2.40000f,//267
	 1.30000f,   0.72800f,   2.40000f,//268
	 0.00000f,   0.00000f,   0.00000f,//269
	 1.50000f,   0.00000f,   0.15000f,//270
	 1.50000f,   0.84000f,   0.15000f,//271
	 0.84000f,   1.50000f,   0.15000f,//272
	 0.00000f,   1.50000f,   0.15000f,//273
	 1.50000f,   0.00000f,   0.07500f,//274
	 1.50000f,   0.84000f,   0.07500f,//275
	 0.84000f,   1.50000f,   0.07500f,//276
	 0.00000f,   1.50000f,   0.07500f,//277
	 1.42500f,   0.00000f,   0.00000f,//278
	 1.42500f,   0.79800f,   0.00000f,//279
	 0.79800f,   1.42500f,   0.00000f,//280
	 0.00000f,   1.42500f,   0.00000f,//281
	-0.84000f,   1.50000f,   0.15000f,//282
	-1.50000f,   0.84000f,   0.15000f,//283
	-1.50000f,   0.00000f,   0.15000f,//284
	-0.84000f,   1.50000f,   0.07500f,//285
	-1.50000f,   0.84000f,   0.07500f,//286
	-1.50000f,   0.00000f,   0.07500f,//287
	-0.79800f,   1.42500f,   0.00000f,//288
	-1.42500f,   0.79800f,   0.00000f,//289
	-1.42500f,   0.00000f,   0.00000f,//290
	-1.50000f,  -0.84000f,   0.15000f,//291
	-0.84000f,  -1.50000f,   0.15000f,//292
	 0.00000f,  -1.50000f,   0.15000f,//293
	-1.50000f,  -0.84000f,   0.07500f,//294
	-0.84000f,  -1.50000f,   0.07500f,//295
	 0.00000f,  -1.50000f,   0.07500f,//296
	-1.42500f,  -0.79800f,   0.00000f,//297
	-0.79800f,  -1.42500f,   0.00000f,//298
	 0.00000f,  -1.42500f,   0.00000f,//299
	 0.84000f,  -1.50000f,   0.15000f,//300
	 1.50000f,  -0.84000f,   0.15000f,//301
	 0.84000f,  -1.50000f,   0.07500f,//302
	 1.50000f,  -0.84000f,   0.07500f,//303
	 0.79800f,  -1.42500f,   0.00000f,//304
	 1.42500f,  -0.79800f,   0.00000f,//305
};
const int utah_bezier_indices[]=
{
	//body
	  1,   2,   3,   4,   5,   6,   7,   8,   9,  10,  11,  12,  13,  14,  15,  16,
	  4,  17,  18,  19,   8,  20,  21,  22,  12,  23,  24,  25,  16,  26,  27,  28,
	 19,  29,  30,  31,  22,  32,  33,  34,  25,  35,  36,  37,  28,  38,  39,  40,
	 31,  41,  42,   1,  34,  43,  44,   5,  37,  45,  46,   9,  40,  47,  48,  13,
	 13,  14,  15,  16,  49,  50,  51,  52,  53,  54,  55,  56,  57,  58,  59,  60,
	 16,  26,  27,  28,  52,  61,  62,  63,  56,  64,  65,  66,  60,  67,  68,  69,
	 28,  38,  39,  40,  63,  70,  71,  72,  66,  73,  74,  75,  69,  76,  77,  78,
	 40,  47,  48,  13,  72,  79,  80,  49,  75,  81,  82,  53,  78,  83,  84,  57,
	 57,  58,  59,  60,  85,  86,  87,  88,  89,  90,  91,  92,  93,  94,  95,  96,
	 60,  67,  68,  69,  88,  97,  98,  99,  92, 100, 101, 102,  96, 103, 104, 105,
	 69,  76,  77,  78,  99, 106, 107, 108, 102, 109, 110, 111, 105, 112, 113, 114,
	 78,  83,  84,  57, 108, 115, 116,  85, 111, 117, 118,  89, 114, 119, 120,  93,
	
	//handle
	121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136,
	124, 137, 138, 121, 128, 139, 140, 125, 132, 141, 142, 129, 136, 143, 144, 133,
	133, 134, 135, 136, 145, 146, 147, 148, 149, 150, 151, 152,  69, 153, 154, 155,
	136, 143, 144, 133, 148, 156, 157, 145, 152, 158, 159, 149, 155, 160, 161,  69,

	//spout
	162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177,
	165, 178, 179, 162, 169, 180, 181, 166, 173, 182, 183, 170, 177, 184, 185, 174,
	174, 175, 176, 177, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197,
	177, 184, 185, 174, 189, 198, 199, 186, 193, 200, 201, 190, 197, 202, 203, 194,

	//lid
	204, 204, 204, 204, 207, 208, 209, 210, 211, 211, 211, 211, 212, 213, 214, 215,
	204, 204, 204, 204, 210, 217, 218, 219, 211, 211, 211, 211, 215, 220, 221, 222,
	204, 204, 204, 204, 219, 224, 225, 226, 211, 211, 211, 211, 222, 227, 228, 229,
	204, 204, 204, 204, 226, 230, 231, 207, 211, 211, 211, 211, 229, 232, 233, 212,
	212, 213, 214, 215, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245,
	215, 220, 221, 222, 237, 246, 247, 248, 241, 249, 250, 251, 245, 252, 253, 254,
	222, 227, 228, 229, 248, 255, 256, 257, 251, 258, 259, 260, 254, 261, 262, 263,
	229, 232, 233, 212, 257, 264, 265, 234, 260, 266, 267, 238, 263, 268, 269, 242,

	//bottom
	270, 270, 270, 270, 279, 280, 281, 282, 275, 276, 277, 278,  93, 120, 119, 114,
	270, 270, 270, 270, 282, 289, 290, 291, 278, 286, 287, 288, 114, 113, 112, 105,
	270, 270, 270, 270, 291, 298, 299, 300, 288, 295, 296, 297, 105, 104, 103,  96,
	270, 270, 270, 270, 300, 305, 306, 279, 297, 303, 304, 275,  96,  95,  94,  93,
};
const int utah_bezier_part_sizes[]={12, 4, 4, 8, 4};
#include<string.h>
#include<math.h>
#ifndef SIZEOF
#define SIZEOF(A)	(sizeof(A)/sizeof(*(A)))
#endif
#ifndef vec3_cross
#define vec3_cross(DST, A, B)\
	(DST)[0]=(A)[1]*(B)[2]-(A)[2]*(B)[1],\
	(DST)[1]=(A)[2]*(B)[0]-(A)[0]*(B)[2],\
	(DST)[2]=(A)[0]*(B)[1]-(A)[1]*(B)[0]
#endif
#ifndef vec3_normalize
#define vec3_normalize(DST, A, TEMP_F)		TEMP_F=1/vec3_abs(A), vec3_div1(DST, A, TEMP_F)
#endif
typedef struct PointStruct
{
	float x, y, z;
} Point;
float		weighted_dot(float *wu, float *wv, float *cache)
{
	//cache stride = 3
	return
		wu[0]*(wv[0]*cache[ 0*3]+wv[1]*cache[ 1*3]+wv[2]*cache[ 2*3]+wv[3]*cache[ 3*3])+
		wu[1]*(wv[0]*cache[ 4*3]+wv[1]*cache[ 5*3]+wv[2]*cache[ 6*3]+wv[3]*cache[ 7*3])+
		wu[2]*(wv[0]*cache[ 8*3]+wv[1]*cache[ 9*3]+wv[2]*cache[10*3]+wv[3]*cache[11*3])+
		wu[3]*(wv[0]*cache[12*3]+wv[1]*cache[13*3]+wv[2]*cache[14*3]+wv[3]*cache[15*3]);
}
void		generate_utah_mesh(ModelStruct *model, int resolution)//resolution >= 1 (it's the number of intervals per Bezier patch)
{
	Point cache[16];

	//direct (naive) evaluation
	float *weights=(float*)malloc((resolution+1)*8*sizeof(float));
	float gain=1.f/resolution;
	for(int kt=0;kt<=resolution;++kt)
	{
		float t=kt*gain, t2=t*t, c=1-t, c2=c*c, tc6=6*t*c;
		int idx=kt<<3;
		weights[idx  ]=  c*c2;//Bezier weights
		weights[idx|1]=3*t*c2;
		weights[idx|2]=3*t2*c;
		weights[idx|3]=  t2*t;

		weights[idx|4]=-3*c2;//derivatives
		weights[idx|5]=3*c2-tc6;
		weights[idx|6]=tc6-3*t2;
		weights[idx|7]=3*t2;
	}

	const int npatches=32;
	int patch_vcount=(resolution+1);
	patch_vcount*=patch_vcount;
	model->n_floats=npatches*patch_vcount*8;
	model->VVVNNNTT=(float*)malloc(model->n_floats*sizeof(float));
	int patch_idx_count=resolution*resolution*6;
	model->n_elements=npatches*patch_idx_count;
	model->indices=(int*)malloc(model->n_elements*sizeof(int));

	for(int offset=0, kpart=0, vidx=0, i_idx=0;kpart<SIZEOF(utah_bezier_part_sizes);++kpart)
	{
		int patchespersurface=utah_bezier_part_sizes[kpart];
		for(int ks=0;ks<patchespersurface;++ks)
		{
			float *vdst=model->VVVNNNTT+8*vidx;
			int idx=(offset+ks)<<4;
			for(int kpoint=0;kpoint<16;++kpoint)
				memcpy(cache+kpoint, utah_bezier_vertices+(utah_bezier_indices[idx+kpoint]-1)*3, sizeof(Point));
			
			int vidx2=0;
			for(int ku=0;ku<=resolution;++ku)
			{
				float *wu=weights+(ku<<3);
				for(int kv=0;kv<=resolution;++kv, vidx2+=8)
				{
					float *wv=weights+(kv<<3);

					//calculate vertex
					vdst[vidx2]=weighted_dot(wu, wv, &cache->x);
					vdst[vidx2+1]=weighted_dot(wu, wv, &cache->y);
					vdst[vidx2+2]=weighted_dot(wu, wv, &cache->z);

					//calculate normal
					float du[]=
					{
						weighted_dot(wu+4, wv, &cache->x),
						weighted_dot(wu+4, wv, &cache->y),
						weighted_dot(wu+4, wv, &cache->z),
					};
					float dv[]=
					{
						weighted_dot(wu, wv+4, &cache->x),
						weighted_dot(wu, wv+4, &cache->y),
						weighted_dot(wu, wv+4, &cache->z),
					};
					float n[3], temp1;
					vec3_cross(n, du, dv);
					vec3_normalize(n, n, temp1);
					vdst[vidx2+3]=n[0];
					vdst[vidx2+4]=n[1];
					vdst[vidx2+5]=n[2];

					//texcoords
					vdst[vidx2+6]=0.5;//
					vdst[vidx2+7]=0.5;
					if(!vdst[vidx2]&&!vdst[vidx2+1]&&!vdst[vidx2+2])
						int LOL_1=0;
				}
			}

			int *idst=model->indices+i_idx;
			for(int ku=0, i_idx2=0, vidx2=vidx;ku<resolution;++ku)
			{
				for(int kv=0;kv<resolution;++kv, i_idx2+=6, ++vidx2)
				{
					idst[i_idx2]=vidx2;
					idst[i_idx2+1]=vidx2+1;
					idst[i_idx2+2]=vidx2+resolution+2;

					idst[i_idx2+3]=vidx2+resolution+2;
					idst[i_idx2+4]=vidx2+resolution+1;
					idst[i_idx2+5]=vidx2;
				}
			}

			i_idx+=patch_idx_count;
			vidx+=patch_vcount;
		}
		offset+=patchespersurface;
	}
	free(weights);
}
void	destroy_model(ModelStruct *model)
{
	free(model->VVVNNNTT);
	free(model->indices);
	free(model->faces);
	memset(model, 0, sizeof(*model));
}
#endif

#endif